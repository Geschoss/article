/**
 * Первые шаги
 * в этом файле мы познакомимся
 *  - с quokka-ой
 *  - с примитивами js
 * код которыей закомментин через "//" нужно будет раскомментить
 */

/**
 * Начнем с quokka
 * Нажимаем Shift + CMD + P
 * В дропдауне пишем quokka
 * выбираем Quokka.js:Run on save current file
 * в нижней части окна появится терминал с выводом. Hello!
 */
console.log("Hello!");
/**
 * Отлично мы познакомились с выводом в консоль
 * console это штука с помощью которой вы можете выводить инфу в консоль.
 * раскомментируйте код ниже и посмотрите что он делает
 */
// console.log('просто логирование');
// console.warn('предупреждение!');
// console.error('так можно вывести ошибки');

/**
 * рассмотрим примитивниые типы
 * буливские значения - тупо ДА и НЕТ
 */
true || false;
/**
 * числа
 */
2;
3;
4.4;
1000;
/**
 * строки
 */
"Строка с двойными ковычками";
"Строка с одинарными ковычками";
`Строка с кривыми ковычками`;
/**
 * Да так много всяких разных строк
 * первые два варианта одинаковые по функционалу
 * третий умеет делать фокусы, мы их разберем позже
 */

/**
 * для того что бы хранить информацию о чем либо
 * удобно использовать объекты или хеш мапы
 * или структуру представляющую ключ и значение
 * для ее создание нужно использовать скобки {}
 *  * не обращайте внимание на круглые скобки, сделайте вид что их нет
 */
({
  name: "Pavel",
  age: 31,
  isPidor: false,
});

/**
 * ну и так как в этом мире обычно все идет в нескольких экземплярах
 * то нам нужна штука где мы будем хранить несколько других штук
 * ну и это массив
 * создается он с помощью квадратных скобок []
 * хранить можно что угодно
 */
[1, 2, 3];
["first", "seconf", 2, false];
[{ name: "Pavel" }, { name: "Anna" }];
/**
 * Вот и все.
 * Все что нужно вам для работы.
 * Опять напомню, что большая часть работы - это преобразования данных.
 * То есть основной упор нужно делать на это.
 * Далее мы разберем что это и вы сами уже начнете понимать
 * что нужно прокачивать и куда копать.
 */

/**
 * как и в большинстве языков в js есть переменные
 * это ящики куда мы складываем данные
 * или ссылки(ух это нужно будет особенно аккуратно разобрать)
 * поехали:
 */
var ageVar = 30;
/**
 * var
 * @description
 * Это старый вариант создания переменных, его НЕ ИСПОЛЬЗУЕМ
 * но должны помнить что такое есть, а то какой супер умник может спросить на собесе
 * @links:
 * https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/var
 * https://learn.javascript.ru/var
 */
let ageLet = 30;
const ageConst = 30;
/**
 * вот эти штуки вы должны использовать всегда.
 * почитайте про эти переменные и главное понять в чем отличие
 * @description
 * зачем нам нужны переменные, ну для того что бы можно было работать с ним.
 * представте если бы у нас не было имен!
 * было бы сложно.
 * Старайтесь давать переменным имена, которые в полной мере описывают то
 * что находиться в ней.
 * а не i, a, b, value, result, list, items and etc.
 * @links:
 * https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/const
 * https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/let
 * https://learn.javascript.ru/variables
 */

/**
 * раскоменьтить код и понять почему IDE показывает ошибку.
 */
// let count = 3;
// count = 5;
// count = count + 2;

// const answer = 42;
// answer = 4;
// answer = answer + 2;

/**
 * в итоге:
 * у нормальных чуваков/чувих всегда только const
 * очень редко используется let и то это скорее всего можно переписать.
 * ЗНАЙТЕ ОБ ЭТОМ!
 * Вот и все для первого шага, поехали играться с числами.
 */

